#include "std_lib_facilities.h"
#include<map>
#include<numeric>
#include<fstream>

struct Item {
    string name;
    int iid;
    double value;
    Item() :name(), iid(0), value(0) { }
    Item(string n, int i, double v) :name(n), iid(i), value(v) { }
};


istream& operator>>(istream& is, Item& it)
{
    string name;
    int iid;
    double value;
    is >> name >> iid >> value;
    if (!is) return is;
    it = Item(name, iid, value);
    return is;
}


ostream& operator<<(ostream& os, const Item& it)
{
    return os << it.name << '\t' << it.iid << '\t' << it.value;
}


struct  Comp_by_name {
    bool operator()(const Item& a, const Item& b) const
    {
        return a.name < b.name;
    }
};


struct Comp_by_iid {
    bool operator()(const Item& a, const Item& b) const
    {
        return a.iid < b.iid;
    }
};


bool comp_by_value(const Item& a, const Item& b)
{
    return a.value < b.value;
}


class Find_by_name {
    string name;
public:
    Find_by_name(const string& s) :name(s) { }
    bool operator()(const Item& it) const
    {
        return it.name == name;
    }
};


class Find_by_iid {
    int iid;
public:
    Find_by_iid(int i) :iid(i) { }
    bool operator()(const Item& it) const
    {
        return it.iid == iid;
    }
};

//------------------------------------------------------------------------------

template<class iter>
void print(iter first, iter last)
{
    while (first != last) {
        cout << *first << '\n';
        ++first;
    }
}


void f1()
{
    cout << "First round: vector\n";
    vector<Item> vi;
    const string ifname = "pics_and_txt/chapter21_drill_in.txt";

    // 1.1
    cout << "1.1: fill with ten items from file\n";
    {
        ifstream ifs(ifname.c_str());
        if (!ifs) error("can't open ", ifname);
        Item i;
        while (ifs >> i) vi.insert(vi.end(), i);
    }
    print(vi.begin(), vi.end());

    // 1.2
    cout << "\n1.2: sort by name\n";
    sort(vi.begin(), vi.end(), Comp_by_name());
    print(vi.begin(), vi.end());

    // 1.3
    cout << "\n1.3: sort by iid\n";
    sort(vi.begin(), vi.end(), Comp_by_iid());
    print(vi.begin(), vi.end());

    // 1.4 - use function instead of function object
    cout << "\n1.4: sort by value, print in decreasing order\n";
    sort(vi.begin(), vi.end(), comp_by_value);
    reverse(vi.begin(), vi.end());
    print(vi.begin(), vi.end());

    // 1.5 - use function instead of function object
    cout << "\n1.5: insert two items\n";
    vi.insert(vi.end(), Item("Horsesh", 99, 12.34));
    vi.insert(vi.end(), Item("C S400", 9988, 499.95));
    sort(vi.begin(), vi.end(), comp_by_value);
    reverse(vi.begin(), vi.end());
    print(vi.begin(), vi.end());

    // 1.6
    cout << "\n1.6: remove two items identified by name\n";
    vector<Item>::iterator vi_it =
        find_if(vi.begin(), vi.end(), Find_by_name("GoPro"));
    vi.erase(vi_it);
    vi_it = find_if(vi.begin(), vi.end(), Find_by_name("Xbox"));